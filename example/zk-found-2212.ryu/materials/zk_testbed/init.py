#!/usr/bin/env python
"""
init for zookeper-dynamic
Env vars:
 * ZKID: e.g. "1"
 * ZKENSEMBLE: e.g. "1,2,3"
 * ZKOVERWRITE: any
"""

BASE_IP='192.168.42.0'
INITIAL_ENSEMBLE=(1,2,3) #Used ZKENSEMBLE is not set
ZOO_CFG="""# zoo.cfg: auto-generated by init.py
tickTime=2000
initLimit=10
syncLimit=5
dataDir=/zk_data
standaloneEnabled=false
"""
OVERWRITE = False #Used if ZKOVERWRITE is not set

import os, re, socket, struct, subprocess

def ip2int(ip):
    return struct.unpack('!L',socket.inet_aton(ip))[0]

def int2ip(i):
    return socket.inet_ntoa(struct.pack('!L',i))

def zkid2ip(zkid):
    return int2ip(ip2int(BASE_IP) + zkid)

def make_zoo_cfg(zkid, zkensemble):
    def server(id, participant=True):
        return 'server.%d=%s:2888:3888:%s;2181' % (id, zkid2ip(id), 'participant' if participant else 'observer')
    cfg = ZOO_CFG
    for i in zkensemble:
        cfg += server(i) + '\n'
    if not zkid in zkensemble:
        cfg += server(zkid, participant=False) + '\n'
    return cfg

def main(zkid, zkensemble, overwrite):
    if (not os.path.isfile('conf/zoo.cfg')) or overwrite:
        cfg = make_zoo_cfg(zkid, zkensemble)
        with open('conf/zoo.cfg', 'w') as f:
            f.write(cfg)

    if (not os.path.isfile('/zk_data/myid')) or overwrite:
        with open('/zk_data/myid', 'w') as f:
            f.write(str(zkid) + '\n')

    ip_ready = False
    while not ip_ready:
        ip = zkid2ip(zkid)
        print('Waiting for configuration of %s' % ip)
        rc = subprocess.call(['ping', ip, '-c1','-w10','-q'])
        ip_ready = rc == 0

    rc = subprocess.call(['bin/zkServer.sh', 'start'])
    if rc != 0:
        raise RuntimeError('zkServer.sh exited with status %d' % rc)


zkid = -1
zkensemble = INITIAL_ENSEMBLE
zkoverwrite = OVERWRITE

env_zkid = os.getenv('ZKID')
if env_zkid is None:
    raise ValueError('You have to set ZKID (1,2,3,..)')
try:
    zkid = int(env_zkid)
except ValueError:
    raise ValueError('Bad ZKID %s' % env_zkid)

env_zkensemble = os.getenv('ZKENSEMBLE')
if env_zkensemble is not None:
    try:
        zkensemble = [int(f) for f in re.split(',\s*', env_zkensemble)]
    except ValueError:
        raise ValueError('Bad ZKENSEMBLE %s' % env_zkensemble)

env_zkoverwrite = os.getenv('ZKOVERWRITE')
zkoverwrite = env_zkoverwrite is not None

main(zkid, zkensemble, zkoverwrite)
